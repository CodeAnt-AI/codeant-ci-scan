name: "CodeAnt Quality Gate Scan"
description: "Runs CodeAnt CI quality gate scan with secret detection and code quality analysis on your GitHub repository"
author: "CodeAnt AI"

branding:
  icon: "shield"
  color: "blue"

inputs:
  access_token:
    description: "GitHub PAT or repository token for authentication"
    required: true
  api_base:
    description: "Base URL for CodeAnt API (e.g., https://api.codeant.ai)"
    required: true
    default: "https://api.codeant.ai"
  timeout:
    description: "Maximum time in seconds to wait for quality gate results (default: 300)"
    required: false
    default: "300"
  poll_interval:
    description: "Time in seconds between polling attempts (default: 15)"
    required: false
    default: "15"

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Fetch quality gates script
      shell: bash
      env:
        API_BASE: ${{ inputs.api_base }}
      run: |
        set -e
        echo "Fetching quality gates script from ${API_BASE}..."
        if ! curl -fsSL -X GET "${API_BASE}/analysis/ci/quality-gates/script/get" --output quality_gates.sh.b64; then
          echo "Error: Failed to fetch quality gates script from ${API_BASE}"
          exit 1
        fi
        echo "Successfully fetched quality gates script"

    - name: Prepare quality gates script
      shell: bash
      env:
        API_BASE: ${{ inputs.api_base }}
      run: |
        set -e
        echo "API_BASE value: '${API_BASE}'"
        # Remove trailing slash if present for comparison
        API_BASE_CLEAN="${API_BASE%/}"
        if [[ "$API_BASE_CLEAN" == "https://api.codeant.ai" ]]; then
          echo "Decoding base64 encoded script..."
          if ! base64 -d quality_gates.sh.b64 > quality_gates.sh; then
            echo "Error: Failed to decode quality gates script"
            exit 1
          fi
        else
          echo "Using script without base64 decoding..."
          mv quality_gates.sh.b64 quality_gates.sh
        fi
        chmod +x quality_gates.sh
        echo "Quality gates script prepared successfully"

    - name: Start Quality Gate Scan
      shell: bash
      env:
        ACCESS_TOKEN: ${{ inputs.access_token }}
        REPO_NAME: ${{ github.repository }}
        COMMIT_ID: ${{ github.sha }}
      run: |
        set -e
        echo "Starting quality gate scan..."
        ./quality_gates.sh \
          -a "$ACCESS_TOKEN" \
          -r "$REPO_NAME" \
          -c "$COMMIT_ID" \
          -s github \
          -o start
        echo "Quality gate scan initiated successfully"

    - name: Poll for Quality Gate Results
      shell: bash
      env:
        ACCESS_TOKEN: ${{ inputs.access_token }}
        REPO_NAME: ${{ github.repository }}
        COMMIT_ID: ${{ github.sha }}
        TIMEOUT: ${{ inputs.timeout }}
        POLL_INTERVAL: ${{ inputs.poll_interval }}
      run: |
        set -e
        echo "Polling for quality gate results..."
        echo "Timeout: ${TIMEOUT}s, Poll Interval: ${POLL_INTERVAL}s"
        ./quality_gates.sh \
          -a "$ACCESS_TOKEN" \
          -r "$REPO_NAME" \
          -c "$COMMIT_ID" \
          -s github \
          -o results \
          -t "$TIMEOUT" \
          -p "$POLL_INTERVAL"
        echo "Quality gate results retrieved successfully"

    - name: Quality Gate Status
      if: always()
      shell: bash
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ Quality Gate PASSED - No secrets detected"
          echo "::notice title=Quality Gate::Quality gate passed successfully"
        else
          echo "❌ Quality Gate FAILED - Secrets detected or scan error"
          echo "::error title=Quality Gate::Quality gate failed - please review the detected issues"
          exit 1
        fi
